import kubernetes-family.acme;
System KubeZnnSystem : KubernetesFam = new KubernetesFam extended with {
  
  /*
    Metacontrollers architecture - Mechanisms
  */
    // -----------------------------------------------------
    // Components for fidelitya
    // -----------------------------------------------------

    //Component fidelitya Deployment
    Component fidelityaMcKubowD : DeploymentT = new DeploymentT extended with {
        Port apiPort  = { }
        Port fidelityaKubeznnPort  = { }
    
        Property namespace = "default";
        Property name = "fidelitya-mc-kubow";

        Property minReplicas = 0;
        Property maxReplicas = 1;
    }

    // -----------------------------------------------------
    // Components for scalabilitya
    // -----------------------------------------------------
    Component scalabilityaMcKubowD : DeploymentT = new DeploymentT extended with {
        Port apiPort  = { }
        Port scalabilityaKubeznnPort  = { }
    
        Property namespace = "default";
        Property name = "scalabilitya-mc-kubow";

        Property minReplicas = 0;
        Property maxReplicas = 1;
    }

    // -----------------------------------------------------
    // Components for fidelityb
    // -----------------------------------------------------

    //Component fidelityb Deployment
    Component fidelitybMcKubowD : DeploymentT = new DeploymentT extended with {
        Port apiPort  = { }
        Port fidelitybKubeznnPort  = { }
    
        Property namespace = "default";
        Property name = "fidelityb-mc-kubow";

        Property minReplicas = 0;
        Property maxReplicas = 1;
    }

    // -----------------------------------------------------
    // Components for scalabilityb
    // -----------------------------------------------------
    Component scalabilitybMcKubowD : DeploymentT = new DeploymentT extended with {
        Port apiPort  = { }
        Port scalabilitybKubeznnPort  = { }
    
        Property namespace = "default";
        Property name = "scalabilityb-mc-kubow";

        Property minReplicas = 0;
        Property maxReplicas = 1;
    }    

    Component failureManagerS : ServiceT = new ServiceT extended with {
      Port apiPort  = { }
      Property name = "failuremanager";

      Property cpufailure = 0.0;
    }

    Component failureManagerD : DeploymentT = new DeploymentT extended with {
      Port apiPort  = { }

      Property namespace = "default";
      Property name = "failuremanager";
    }

    Connector failureManagerServiceConnector  = new LabelSelectorConnectorT extended with {
      Property selectors = <[name : string = "app";value : string = "failuremanager";]>;
    }

    Attachment failureManagerS.apiPort to failureManagerServiceConnector.callee;
    Attachment failureManagerD.apiPort to failureManagerServiceConnector.caller;
  


  /*
    Target System architecture - KubeZnn
  */
  
  Component kubeZnnDbS : ServiceT = new ServiceT extended with {
    Port sqlPort  = { }
    Port connectionSqlPort  = { }
    Property name = "kube-znn-db";
  }
  Component kubeZnnDbD : DeploymentT = new DeploymentT extended with {
    Port sqlPort  = { }
    Property namespace = "default";
    Property name = "kube-znn-db";
  }
  Component kubeZnnS : ServiceT = new ServiceT extended with {
    Port apiPort  = { }
    Property name = "kube-znn";
    Property expectedSlo = 0.95;
    Property desiredSlo = 0.98;
  }
  Component kubeZnnD : DeploymentT = new DeploymentT extended with {
    Port apiPort  = { }
    Port sqlPort  = { }
    Property namespace = "default";
    Property hasAlternativeImages = true;
    Property maxReplicas = 10;
    Property alternativeImages = <"cmendes/znn:100k", "cmendes/znn:200k","cmendes/znn:600k">;
    Property name = "kube-znn";
    Property replicasHigh = 3;
    Property replicasLow = 0;
    Property replicasText = 0;
    Property stability = 0;

  }
  Connector dbConnection  = new ServiceConnectorT extended with {
    Property namespace = "default";
    Property name = "kube-znn-db";
  }
  Connector kubeZnnServiceConnector  = new LabelSelectorConnectorT extended with {
    Property selectors = <[name : string = "app";value : string = "kube-znn";]>;
  }
  Connector dbServiceConnector  = new ServiceConnectorT extended with {
    Property selectors = <[name : string = "app";value : string = "kube-znn-db";]>;
  }


  

  Attachment kubeZnnDbD.sqlPort to dbServiceConnector.selectee;
  Attachment kubeZnnDbS.sqlPort to dbServiceConnector.selector;
  Attachment kubeZnnDbS.connectionSqlPort to kubeZnnServiceConnector.callee;
  Attachment kubeZnnD.sqlPort to kubeZnnServiceConnector.caller;
  Attachment kubeZnnD.apiPort to dbConnection.selectee;
  Attachment kubeZnnS.apiPort to dbConnection.selector;
}
